class ServerListViewSet(viewsets.ViewSet):
"""
A viewset that returns a list of servers based on various query parameters.
Attributes:
queryset (QuerySet): A queryset of all Server objects.
"""
queryset = Server.objects.all()
def list(self, request):
"""
Returns a list of servers based on various query parameters.
Args:
request (Request): The HTTP request object.
Returns:
Response: A JSON response containing a list of serialized Server objects.
"""
    category = request.query_params.get("category")
    qty = request.query_params.get("qty")
    by_user = request.query_params.get("by_user") == "true"
    by_server_id = request.query_params.get("by_server_id")
    with_num_members = request.query_params.get("with_num_members") == "true"
    if by_user and not request.user.is_authenticated:
        raise AuthenticationFailed()
    if category:
        self.queryset = self.queryset.filter(category__name=category)
    if by_user:
        user_id = request.user.id
        self.queryset = self.queryset.filter(member=user_id)
    if with_num_members:
        self.queryset = self.queryset.annotate(num_members=Count("member"))
    if qty:
        self.queryset = self.queryset[: int(qty)]
    if by_server_id:
        try:
            self.queryset = self.queryset.filter(id=by_server_id)
            if not self.queryset.exists():
                raise ValidationError(detail=f"Server: {by_server_id} is unknown.")
        except ValueError:
        raise ValidationError(detail=f"Sorry the system has found an error during the research (Error: {ValueError}) of the server with id: {by_server_id}")
    serializer = ServerSerializer(self.queryset, many=True, context={"num_members": with_num_members})
    return Response(serializer.data)